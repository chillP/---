#include "p2p.h"

uint8_t Radio_Eui[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

uint16_t Send_FCNT = 0;
uint16_t Rec_FCNT = 0;
uint8_t REC_RFU = 0;
uint8_t SEND_RFU = 0x66;
uint8_t SEND_RAND = 0;

// 网关的发送数据参数
uint32_t CT_Send_freq_hz = 0;
uint16_t CT_Send_datarate = 0;

// aes加密变量
aes_context AesContext;

int LastRSSI = 0;
int LastSNR = 0;



int CT_Command_Parsing(uint8_t *PlayLoad,uint16_t len, struct lgw_pkt_rx_s * lgw_pkt_rx_s){
	int result = 0;
	int i = 0;
	int pare_bit = 0;
	int rand_temp = 0;
	uint8_t command_buf[300] = "";
	uint8_t comm_data_len = 0;
	
	struct Config_Frame config_frame_rec;
	memset(command_buf, 0x00, sizeof(command_buf));
	memset(&config_frame_rec, 0x00, sizeof(config_frame_rec));
	
	CT_Send_freq_hz = lgw_pkt_rx_s->freq_hz;
	CT_Send_datarate = lgw_pkt_rx_s->datarate;
	LastRSSI = ceil(lgw_pkt_rx_s->rssi);
	LastSNR = ceil(lgw_pkt_rx_s->snr);
	
	//判断命令合法性
	result = CT_Command_Inspect(PlayLoad, len);
	if(result == true){
		//命令解密
	   result = CT_Command_AES_Decrypt(PlayLoad, command_buf,len, &config_frame_rec);
	}
	
}

/**
  * @brief  数据合法性判断
  * @param  PlayLoad: 接受到数据
  			len: 接受到长度

  * @retval Radio_COMMAND
  			CT_GW_EUI_ERR
  			CHECK_ERROR
  			FREAM_ERROR
  */
int CT_Command_Inspect(uint8_t *PlayLoad,uint16_t len)
{
	uint16_t i;
	uint8_t add = 0;
	uint8_t eui_temp[8] = "";
	uint8_t check = 0;

	printf("PlayLoad:");
	for(i = 0; i<len; i++)
	{
		printf("%02X ",PlayLoad[i]);
	}
	printf("\n");
	if(PlayLoad[0] == 0xE5 && PlayLoad[1] == 0xFC && PlayLoad[2] == 0x29)
	{
	
		printf("add:");
		for(i = 0; i< (len - 4); i++){
			add += PlayLoad[i+3];
			printf("%02x ",PlayLoad[i+3]);
		}
		printf("\n");

		if(add == PlayLoad[len-1]){

			//判断网关eui
		    eui_temp[0]  = PlayLoad[11];
	        eui_temp[1]  = PlayLoad[12];
	        eui_temp[2]  = PlayLoad[13];
	        eui_temp[3]  = PlayLoad[14];
	        eui_temp[4]  = PlayLoad[15];
	        eui_temp[5]  = PlayLoad[16];
	        eui_temp[6]  = PlayLoad[17];
	        eui_temp[7]  = PlayLoad[18];
			
			for(i = 0; i<8; i++){
				if(eui_temp[i] == Radio_Eui[i]){
					check++;
				}
			}
		
			if(check == 8)
			{
				return Radio_COMMAND;
			}
			
			for(i = 0; i<8; i++)
			{
				printf("GWEUI[%d]:%x,CTGWEUI[%d]:%x\n",i ,eui_temp[i], i, CT_User_ST.CT_GW_EUI[i]);
				if(eui_temp[i] != CT_User_ST.CT_GW_EUI[i]){
						printf("EUI error !\n");
						return CT_GW_EUI_ERR;
				}
			}
			return true;
		   
			
		}else{
			printf("frean check error !\n");
			return CHECK_ERROR;
		}
	}else{
		printf("frean error !\n");
		return FREAM_ERROR;
	}

}

/**
  * @brief  配置工具数据加密函数
  			对完整命令包有需要的内容加密
  * @param  data: 未加密数据
  			send_buf: 加密后数据
  			len: 需要加密数据长度
  * @retval index: 加密后数据长度
  */
int CT_Aes_Encrypt_Pack(char * data, char * send_buf, int len)
{
	//aes数据长度
    int aes_len = 0;
    int len_temp = 0;
    uint8_t aes_token[17] = "";
    int i = 0;
    int index = 0;
    int add = 0;

    //需要加密的数据
    char data_temp[300] = "";
    //加密后的数据
    char aes_data[300] = "";

    for(i = 0; i<20; i++)
    {
        send_buf[index++] = data[i];
    }

    for(i = 0; i<(len-23); i++)
    {
        data_temp[i] = data[i+20];
        aes_len ++;
    }
	p2p_Hex_printf("aes", data_temp, (len-23), 0);
	
    len_temp = aes_len;

    p2p_Produck_Key(SEND_RAND, SEND_RAND+Send_FCNT, CT_User_ST.CT_GW_EUI, aes_token);


	//CT_Hex_printf("eui:", CT_User_ST.CT_GW_EUI, 8, 0);

	p2p_Hex_printf("key:", aes_token, 16, 0);
	
    //初始化AES
    aes_set_key(aes_token, 16, &AesContext);

    do{
        aes_encrypt((uint8_t *)data_temp+(aes_len - len_temp), (uint8_t *)aes_data+(aes_len - len_temp), &AesContext);

        for(i = 0; i<16; i++)
        {
            send_buf[index++] = aes_data[i+(aes_len - len_temp)];
        }

        len_temp -= 16;
    }while(len_temp > 0);

    for(i = 0 ; i<3; i++)
    {
        send_buf[index++] = data[(len - 3) + i];
    };

	//CT_Hex_printf("tail", send_buf, 4, index-4);

	printf("add:");

	//E5 FC 29 [内容相加] CS 18
	for(i = 0; i< (index - 3); i++){
			add += send_buf[i+3];
			printf("%02x ",send_buf[i+3]);
			//printf("%x \n",add);
	}
	printf("\n");
	send_buf[index++] = add;

	//send_buf[index++] = 0X18;

    return index;
}

int p2p_Produck_Key(uint8_t RAND, uint16_t FCNT, uint8_t * eui, uint8_t * token)
{
    int i = 0;
    uint8_t key1_temp;
    uint8_t key2_temp;

    key1_temp = RAND ^ FCNT;
    key2_temp = RAND ^ (FCNT >> 8);

    for(i = 0; i <8; i++)
    {
        token[i] = key1_temp ^ eui[i];
    }

    for(i = 0; i <8; i++)
    {
        token[8+i] = key1_temp ^ eui[i];
    }

}

int p2p_Hex_printf(char * remarks, uint8_t * Hex_data, int len, int offset)
{
	int i = 0;
	printf("%s:", remarks);
	for(i = 0 ; i<len; i++)
	{
		printf("%02X ", Hex_data[i+offset]);
	}
	printf("\n");
}